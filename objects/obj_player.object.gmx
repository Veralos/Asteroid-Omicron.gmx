<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//constants
base_state = 0;
dash_state = 1;
magnet_state = 2;
phase_max = 5;

//variables
dir_x = 0;
dir_y = 0;
facing_x = 1;
facing_y = 1;
priority_x = true;
angle = 0;
right_gun = true;
canshoot = 10;
inv = 0;
flash = true;
state = base_state;
dash = 0;
dash_cooldown = 0;
phase = 0;
last_floor = -1;
magnet_flash = true;
magnet_dir = 1;
convey_x = 0;
convey_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.MAP)
    visible = !obj_draw_game.map_save;
    
var left_held = keyboard_check(vk_left) || obj_controller.leftstick_left;
var right_held = keyboard_check(vk_right) || obj_controller.leftstick_right;
var up_held = keyboard_check(vk_up) || obj_controller.leftstick_up;
var down_held = keyboard_check(vk_down) || obj_controller.leftstick_down;
var shoot_held = keyboard_check(ord('A')) || gamepad_button_check(0, gp_face3) || gamepad_button_check(0, gp_shoulderrb);

var left_pressed = keyboard_check_pressed(vk_left) || obj_controller.leftstick_left_pressed;
var right_pressed = keyboard_check_pressed(vk_right) || obj_controller.leftstick_right_pressed;
var up_pressed = keyboard_check_pressed(vk_up) || obj_controller.leftstick_up_pressed;
var down_pressed = keyboard_check_pressed(vk_down) || obj_controller.leftstick_down_pressed;
var dash_pressed = keyboard_check_pressed(ord('S')) || gamepad_button_check_pressed(0, gp_face1) || gamepad_button_check_pressed(0, gp_shoulderlb);
var magnet_pressed = keyboard_check_pressed(ord('D')) || gamepad_button_check_pressed(0, gp_face2) || gamepad_button_check_pressed(0, gp_shoulderr);

if (obj_game_control.state == obj_game_control.base_state) {
    flash = !flash;
    magnet_flash = !magnet_flash;
    
    if (inv &gt; 0)
        inv--;
        
    if (canshoot &gt; 0)
        canshoot--;
        
    if (dash_cooldown &gt; 0)
        dash_cooldown--;
        
    if (phase &gt; 0)
        phase--;
        
    var curr_floor = instance_place(x, y, obj_floor_spawn);
    if (curr_floor != noone &amp;&amp; state != magnet_state)
        last_floor = curr_floor;
        
    if (inv &lt;= 0 &amp;&amp; instance_exists(obj_heat) &amp;&amp; !scr_item_found(obj_game_control.item_heat_shield)) {
        audio_play_sound(snd_hurt, 0, false);
        obj_game_control.hp -= 1;
        inv = 30;
    }
    
    switch (state) {
        case (base_state):
    
            dir_x = 0;
            if (left_held)
                dir_x--;
            if (right_held)
                dir_x++;
            dir_y = 0;
            if (up_held)
                dir_y--;
            if (down_held)
                dir_y++;
                
            if (place_free(x + dir_x, y) &amp;&amp; place_meeting(x, y, obj_floor))
                x += dir_x;
            if (place_free(x, y + dir_y) &amp;&amp; place_meeting(x, y, obj_floor))
                y += dir_y;
                
            if (place_free(x + sign(convey_x), y) &amp;&amp; place_meeting(x, y, obj_floor))
                x += sign(convey_x);
            if (place_free(x, y + sign(convey_y)) &amp;&amp; place_meeting(x, y, obj_floor))
                y += sign(convey_y);
            
            if (left_pressed || right_pressed)
                priority_x = true;
            if (up_pressed || down_pressed)
                priority_x = false;
                
            if (dash_pressed &amp;&amp; dash_cooldown &lt;= 0 &amp;&amp; scr_item_found(obj_game_control.item_dash)) {
                audio_play_sound(snd_dash, 0, false);
                dash = 2;
                if (scr_item_found(obj_game_control.item_phase_dash))
                    phase = phase_max;
                state = dash_state;
            }
            else if (magnet_pressed &amp;&amp; scr_item_found(obj_game_control.item_magnet)) {
                with (instance_create(x, y, obj_magnet)) {
                    angle = obj_player.angle;
                    move_contact_solid(angle, 64);
                    x += lengthdir_x(2, angle);
                    y += lengthdir_y(2, angle);
                }
                
                if (place_meeting(obj_magnet.x, obj_magnet.y, obj_wall_magnet))
                    audio_play_sound(snd_magnet, 0, false);
                else {
                    audio_play_sound(snd_magnet_fail, 0, false);
                    if (scr_item_found(obj_game_control.item_magnet_inverter))
                        magnet_dir = -magnet_dir;
                }
                state = magnet_state;
                magnet_flash = true;
            }
                
            if (!shoot_held || state == dash_state) {
                if (state != magnet_state) {
                    if (abs(gamepad_axis_value(0, gp_axislh)) &gt; 0.5 || abs(gamepad_axis_value(0, gp_axislv)) &gt;= 0.5)
                        angle = round(point_direction(0, 0, gamepad_axis_value(0, gp_axislh), gamepad_axis_value(0, gp_axislv)) / 90) * 90;
                    else if ((dir_x != 0 &amp;&amp; dir_y != 0)) {
                        if (priority_x)
                            angle = point_direction(0, 0, dir_x, 0);
                        else
                            angle = point_direction(0, 0, 0, dir_y);
                    }
                    else if (!(dir_x == 0 &amp;&amp; dir_y == 0))
                        angle = point_direction(0, 0, dir_x, dir_y);
                }
            }
            else if (obj_game_control.ammo &gt; 0 &amp;&amp; canshoot &lt;= 0 &amp;&amp; inv &lt;= 0){
                audio_play_sound(snd_shoot, 0, false);
                
                var shift_mod = -1;
                if (right_gun)
                    var shift_mod = 1;
                var shift_x = lengthdir_x(4, angle) + shift_mod * lengthdir_x(1, angle - 90);
                var shift_y = lengthdir_y(4, angle) + shift_mod * lengthdir_y(1, angle - 90);
                
                var bullet = instance_create(x + shift_x, y + shift_y, obj_bullet);
                bullet.image_angle = angle;
                if (!right_gun)
                    bullet.image_yscale = -1;
            
                right_gun = !right_gun
                canshoot = 2;
                with (obj_game_control)
                    event_user(0);
            }
    
            if (state != magnet_state &amp;&amp; !place_meeting(x, y, obj_floor)) {
                if (inv &lt;= 0 &amp;&amp; instance_exists(obj_heat)) {
                    audio_play_sound(snd_hurt, 0, false);
                    obj_game_control.hp -= 2;
                    inv = 15;
                }
                x = last_floor.x + 2;
                y = last_floor.y + 2;
                audio_play_sound(snd_fall, 0, false);
                inv = 15;
            }
                
            break;
        case (dash_state):
            if (scr_item_found(obj_game_control.item_phase_dash))
                phase = phase_max;
        
            var ai = instance_create(x, y, obj_afterimage);
            ai.image_angle = angle;
            
            var dash_speed = 4;
        
            var move_x = lengthdir_x(dash_speed, angle);
            var move_y = lengthdir_y(dash_speed, angle);
            
            if (scr_item_found(obj_game_control.item_phase_dash)) {
                with (obj_wall_phase)
                    solid = false;
            }
        
            if (place_free(x + move_x, y + move_y)) {
                x += move_x;
                y += move_y;
            }
            else {
                move_contact_solid(angle, 4);
                dash = 0;
            }
            
            with (obj_wall_phase)
                solid = true;
    
            dash--;
            if (dash &lt;= 0 &amp;&amp; !place_meeting(x, y, obj_wall_phase)) {
                state = base_state;
                dash_cooldown = 5;
            }
            break;
        case (magnet_state):
            if (place_meeting(obj_magnet.x, obj_magnet.y, obj_wall_magnet)) {
                var move_x = magnet_dir * lengthdir_x(3, angle);
                var move_y = magnet_dir * lengthdir_y(3, angle);
            
                if (place_free(x + move_x, y + move_y)) {
                    x += move_x;
                    y += move_y;
                }
                else {
                    move_contact_solid(point_direction(0, 0, move_x, move_y), 4);
                    with (obj_magnet)
                        instance_destroy();
                    state = base_state;
                }
            }
            else {
                with (obj_magnet)
                    instance_destroy();
                state = base_state;
            }
            break;
    }
    
    convey_x = 0;
    convey_y = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_drill">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp -= 2;
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_electricity">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp -= 2;
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_boss_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp -= 2;
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_bullet2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp -= 2;
    with (other)
        instance_destroy();
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp--;
    with (other)
        instance_destroy();
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (inv &lt;= 0 &amp;&amp; phase &lt;= 0) {
    audio_play_sound(snd_hurt, 0, false);
    obj_game_control.hp -= 2;
    inv = 15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_conveyor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>convey_x += lengthdir_x(1, other.dir);
convey_y += lengthdir_y(1, other.dir);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == magnet_state)
    state = base_state;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
if (magnet_dir == 1)
    draw_set_color(c_blue);

var sprite = spr_player;
if (scr_item_found(obj_game_control.item_power_shot))
    sprite = spr_player_power;
if (state == magnet_state) {
    sprite = spr_player_magnet;
    
    if (magnet_flash) {
        draw_line_width(x - 1, y - 1, obj_magnet.x - 1, obj_magnet.y - 1, 2);
    }
}

if (flash || inv &lt;= 0) {
    draw_sprite_ext(sprite, 0, x, y, 1, 1, angle, c_white, 1);
    if (scr_item_found(obj_game_control.item_magnet))
        draw_sprite_ext(spr_player_indicator, 0, x, y, 1, 1, angle, draw_get_color(), 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
